Description: >-
  VPC with a public and private subnet
AWSTemplateFormatVersion: 2010-09-09
Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names (e.g. dev)
    Type: String

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes
  InternetRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  DatabaseSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Database Subnet A
  DatabaseSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Database Subnet B

  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${EnvironmentName} Web Group
      GroupDescription: HTTP and HTTPS traffic in, all traffic out
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: "443"
          ToPort: "443"
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${EnvironmentName} Database Group
      GroupDescription: MySQL (Aurora) connections in only
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "3306"
          ToPort: "3306"
          CidrIp: 10.0.0.0/16
      # Remove the default egress rule by adding a localhost
      # only rule.
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 127.0.0.1/32

Outputs:
  DatabaseSubnetAID:
    Description: ID of the first private subnet which contains the database
    Value: !Ref DatabaseSubnetA
    Export:
      Name: !Sub ${AWS::StackName}-DatabaseSubnetAID
  DatabaseSubnetBID:
    Description: ID of the second private subnet which contains the database
    Value: !Ref DatabaseSubnetB
    Export:
      Name: !Sub ${AWS::StackName}-DatabaseSubnetBID
  DatabaseSecurityGroup:
    Description: ID of the security group for the database cluster
    Value: !Ref DatabaseSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-DatabaseSecurityGroup
